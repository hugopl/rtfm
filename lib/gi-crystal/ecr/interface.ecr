module <%= namespace_name %>
  <% render_doc(object) -%>
  module <%= type_name %>
    macro included
      {% raise "Cannot include GObject interface in module" if @type.module? %}
      {% raise "#{@type} must inherit from GObject::Object to implement GObject interfaces" unless (@type < ::GObject::Object) %}

      macro inherited
        include <%= namespace_name %>::<%= type_name %>
      end

      {% unless @type.annotation(GICrystal::GeneratedWrapper) %}
        def self._install_iface_<%= namespace_name %>__<%= type_name %>(interface : Pointer(LibGObject::TypeInterface)) : Nil
        end
      {% end %}
    end

    def self.g_type : UInt64
      <%= namespace_name %>::<%= abstract_interface_name(object, false) %>.g_type
    end

    <% render_properties %>
    <% render_methods %>
    <% render_vfuncs %>
    <% render_signals %>

    # Cast a `GObject::Object` to `self`, throws a `TypeCastError` if the cast can't be made.
    def self.cast(obj : GObject::Object) : self
      cast?(obj) || raise TypeCastError.new("can't cast #{typeof(obj).name} to #{self}")
    end

    def self.cast?(obj : GObject::Object) : self?
      if LibGObject.g_type_check_instance_is_a(obj, g_type) != 0
        <%= abstract_interface_name(object, false) %>.new(obj.to_unsafe, :none)
      end
    end

    abstract def to_unsafe
  end

  # :nodoc:
  @[GICrystal::GeneratedWrapper]
  class <%= abstract_interface_name(object, false) %> < GObject::Object
    include <%= type_name %>

    GICrystal.declare_new_method(<%= abstract_interface_name(object) %>, g_object_get_qdata)

    # Forbid users to create instances of this.
    private def initialize
    end

    <% render "ecr/interface_g_type_method.ecr" %>
  end
end
